// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  phone         String?
  cpf           String?   @unique
  birthDate     DateTime?
  gender        String?
  orders        Order[]
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  emailVerified DateTime?
  phoneVerified DateTime?
}

model Order {
  id            String          @id @default(cuid())
  user          User?           @relation(fields: [userId], references: [id])
  userId        String?
  customerName  String
  customerPhone String
  customerEmail String?
  address       Address         @relation(fields: [addressId], references: [id])
  addressId     String
  items         OrderItem[]
  payment       Payment?
  status        OrderStatus     @default(PENDING)
  trackingInfo  TrackingInfo?
  statusUpdates StatusUpdate[]
  total         Float
  subtotal      Float
  tax           Float
  deliveryFee   Float
  discount      Float?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  cancellationReason    String?
  cancelledAt          DateTime?
}

model Address {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  street       String
  number       String
  neighborhood String
  complement   String?
  city         String
  state        String
  zipCode      String
  isDefault    Boolean  @default(false)
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  size        String
  base        String
  topping     String
  complements String[]
  extras      String[]
  quantity    Int
  price       Float
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  amount        Float
  method        String
  status        String
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TrackingInfo {
  id            String   @id @default(cuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  status        String
  location      String?
  estimatedTime DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StatusUpdate {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  status      String
  notes       String?
  createdAt   DateTime @default(now())
}
